{"version":3,"sources":["components/error-indicator/death-star-icon.png","components/header/index.js","components/header/header.js","services/swapi-service.js","components/spinner/index.js","components/spinner/spinner.js","components/error-indicator/index.js","components/error-indicator/error-indicator.js","components/random-planet/random-planet.js","components/random-planet/index.js","components/swapi-service-context/swapi-service-context.js","components/item-details/item-details.js","components/item-details/index.js","components/hoc-helpers/with-data.js","components/hoc-helpers/with-swapi-service.js","components/hoc-helpers/with-child-function.js","components/hoc-helpers/compose.js","components/sw-components/person-details.js","components/sw-components/planet-details.js","components/sw-components/starship-details.js","components/item-list/item-list.js","components/item-list/index.js","components/sw-components/item-list.js","components/row/index.js","components/row/row.js","components/pages/people-page.js","components/pages/planets-page.js","components/pages/starships-page.js","components/app/index.js","components/app/app.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","react_router_dom","to","SwapiService","_baseUrl","_baseImage","_transformPlanet","planet","id","_this","_extractId","name","population","rotationPeriod","rotation_period","diameter","_transformStarships","starship","model","manufacturer","costInCredits","cost_in_credits","length","crew","passengers","cargoCapacity","cargo_capacity","_transformPerson","person","gender","birthYear","birth_year","eyeColor","eye_color","getResourse","_callee","url","res","regenerator_default","wrap","_context","prev","next","fetch","concat","sent","ok","Error","status","json","abrupt","stop","getAllPeople","_callee2","_context2","results","map","getPerson","_callee3","_context3","getAllPlanets","_callee4","_context4","getPlanet","_callee5","_context5","getAllStarships","_callee6","_context6","getStarship","_callee7","_context7","getPlanetImage","_ref8","getPersonImage","_ref9","getStarshipImage","_ref10","item","match","Spinner","ErrorIndicator","src","icon","alt","RandomPlanet","swapiService","state","loading","error","onPlanetLoaded","setState","onError","err","console","updatePlanet","Math","floor","random","then","catch","updateInterval","this","props","interval","setInterval","clearInterval","_this$state","loadingData","spinner","components_spinner","planetView","random_planet_PlanetView","errorIndicator","components_error_indicator","Component","defaultProps","PlanetView","_ref","Fragment","React","createContext","SwapiServiceProvider","Provider","SwapiServiceConsumer","Consumer","Record","field","label","ItemDetails","image","itemUpdate","_this$props","itemId","getData","getImageUrl","prevProps","itemView","item_details_ItemView","children","ItemView","_ref2","Children","child","cloneElement","withData","View","_Component","_temp","_getPrototypeOf2","Object","classCallCheck","_len","arguments","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","data","onDataLoaded","inherits","createClass","key","value","assign","withSwapiService","mapMethodsToProps","Wrapper","propsService","withChildFunction","fn","Wrapped","compose","functions","component","reduceRight","prevResult","f","components_item_details","item_details_Record","ItemList","itemSelection","renderItem","items","onClick","renderName","PersonList","PlanetList","StarshipList","Row","left","right","withRouter","history","params","components_row","push","person_details","planet_details","App","components_header","components_random_planet","react_router","path","render","exact","PeoplePage","PlanetsPage","StarshipsPage","starship_details","ReactDOM","components_app","document","getElementById"],"mappings":"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","file":"static/js/main.91445c01.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/death-star-icon.e76c8d59.png\";","import Header from './header';\n\nexport default Header;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './header.scss';\n\nconst Header = () => {\n  return (\n    <div className=\"header\">\n      <Link to=\"/2-react-starDB/\" className=\"header__title\">Star DB</Link>\n      <div className=\"header__menu-list\">\n        <Link to=\"/2-react-starDB/people/\" className=\"header__menu-item\">People</Link>\n        <Link to=\"/2-react-starDB/planets/\" className=\"header__menu-item\">Planets</Link>\n        <Link to=\"/2-react-starDB/starships/\" className=\"header__menu-item\">Starships</Link>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","export default class SwapiService {\n\n    _baseUrl = 'https://swapi.co/api';\n    _baseImage = 'https://starwars-visualguide.com/assets/img';\n\n    _extractId(item) {\n        const idRegExp = /([0-9]*)\\/$/;\n        return item.url.match(idRegExp)[1];\n    }\n\n    _transformPlanet = (planet) => {\n        return {\n            id: this._extractId(planet),\n            name: planet.name,\n            population: planet.population,\n            rotationPeriod: planet.rotation_period,\n            diameter: planet.diameter\n        }\n    }\n\n    _transformStarships = (starship) => {\n        return {\n            id: this._extractId(starship),\n            name: starship.name,\n            model: starship.model,\n            manufacturer: starship.manufacturer,\n            costInCredits: starship.cost_in_credits,\n            length: starship.length,\n            crew: starship.crew,\n            passengers: starship.passengers,\n            cargoCapacity: starship.cargo_capacity\n        }\n    }\n\n    _transformPerson = (person) => {\n        return {\n            id: this._extractId(person),\n            name: person.name,\n            gender: person.gender,\n            birthYear: person.birth_year,\n            eyeColor: person.eye_color\n        }\n    }\n\n    getResourse = async (url) => {\n        const res = await fetch(`${this._baseUrl}${url}`);\n\n        if (!res.ok) {\n            throw new Error(`Could not fetch ${this._baseUrl}${url}, received ${res.status}`);\n        }\n\n        return await res.json();\n    }\n\n    getAllPeople = async () => {\n        const res = await this.getResourse(`/people/`);\n        return res.results.map(this._transformPerson);\n    }\n\n    getPerson = async (id) => {\n        const person = await this.getResourse(`/people/${id}/`);\n        return this._transformPerson(person);\n    }\n\n    getAllPlanets = async () => {\n        const res = await this.getResourse(`/planets/`);\n        return res.results.map(this._transformPlanet);\n    }\n\n    getPlanet = async (id) => {\n        const planet = await this.getResourse(`/planets/${id}/`);\n        return this._transformPlanet(planet);\n    }\n\n    getAllStarships = async () => {\n        const res = await this.getResourse(`/starships/`);\n        return res.results.map(this._transformStarships);\n    }\n\n    getStarship = async (id) => {\n        const starship = await this.getResourse(`/starships/${id}/`);\n        return this._transformStarships(starship);\n    }\n\n    getPlanetImage = ({ id }) => {\n        return `${this._baseImage}/planets/${id}.jpg`;\n    }\n\n    getPersonImage = ({ id }) => {\n        return `${this._baseImage}/characters/${id}.jpg`;\n    }\n\n    getStarshipImage = ({ id }) => {\n        return `${this._baseImage}/starships/${id}.jpg`;\n    }\n}\n","import Spinner from './spinner';\n\nexport default Spinner;","// https://loading.io/\nimport React from 'react';\n\nimport './spinner.scss';\n\nconst Spinner = () => {\n    return (\n        <div className=\"spinner\">\n            <div className=\"lds-css ng-scope\">\n                <div className=\"lds-double-ring\">\n                    <div></div>\n                    <div></div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Spinner;","import ErrorIndicator from './error-indicator';\n\nexport default ErrorIndicator;","import React from 'react';\n\nimport './error-indicator.scss';\nimport icon from './death-star-icon.png';\n\nconst ErrorIndicator = () => {\n    return (\n        <div className=\"error-indicator\">\n            <img className=\"error-indicator__image\" src={ icon } alt=\"death icon\"/>\n            <span className=\"error-indicator__title\">BOOM!</span>\n            <span className=\"error-indicator__text\">something went wrong</span>\n            <span className=\"error-indicator__text\">(we sent the droids for repair)</span>\n        </div>\n    );\n}\n\nexport default ErrorIndicator;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport SwapiService from '../../services/swapi-service'\nimport Spinner from '../spinner';\nimport ErrorIndicator from '../error-indicator';\n\nimport './random-planet.scss';\n\nexport default class RandomPlanet extends Component {\n\n    static defaultProps = {\n        updateInterval: 5000\n    };\n\n    static propTypes = {\n        updateInterval: PropTypes.number\n    }\n\n    swapiService = new SwapiService();\n\n    state = {\n        planet: {},\n        loading: true,\n        error: false\n    };\n\n    componentDidMount() {\n        const { updateInterval } = this.props;\n\n        this.interval = setInterval(this.updatePlanet, updateInterval);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    onPlanetLoaded = (planet) => {\n        this.setState({ planet, loading: false });\n    }\n\n    onError = (err) => {\n        console.error(err);\n        this.setState({\n            error: true,\n            loading: false\n        });\n    }\n\n    updatePlanet = () => {\n        const id = Math.floor(Math.random() * 17) + 2;\n\n        this.swapiService\n            .getPlanet(id)\n            .then(this.onPlanetLoaded)\n            .catch(this.onError);\n    };\n\n    render() {\n\n        const { planet, loading, error } = this.state;\n\n        const loadingData = (!loading && !error);\n        const spinner = loading ? <Spinner /> : null;\n        const planetView = loadingData ? <PlanetView planet={planet} /> : null;\n        const errorIndicator = error ? <ErrorIndicator /> : null;\n\n        return (\n            <div className=\"random-planet\">\n                {errorIndicator}\n                {spinner}\n                {planetView}\n            </div>\n        );\n    }\n}\n\nconst PlanetView = ({ planet }) => {\n\n    const { id, name, population, rotationPeriod, diameter } = planet;\n\n    return (\n        <React.Fragment>\n            <img className=\"random-planet__image\" src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`} alt=\"\" />\n            <div className=\"random-planet__info\">\n                <div className=\"random-planet__info-title\">\n                    {name}\n                </div>\n                <div className=\"random-planet__info-list list-group list-group-flush\">\n                    <div className=\"random-planet__info-item list-group-item\">\n                        Population: {population}\n                    </div>\n                    <div className=\"random-planet__info-item list-group-item\">\n                        Rotation period: {rotationPeriod}\n                    </div>\n                    <div className=\"random-planet__info-item list-group-item\">\n                        Diameter: {diameter}\n                    </div>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n};\n","import RandomPlanet from './random-planet';\n\nexport default RandomPlanet;","import React from 'react';\n\nconst {\n    Provider: SwapiServiceProvider,\n    Consumer: SwapiServiceConsumer\n} = React.createContext();\n\nexport {\n    SwapiServiceProvider,\n    SwapiServiceConsumer\n};\n","import React, { Component } from 'react';\n\nimport Spinner from '../spinner';\n\nimport './item-details.scss';\n\nconst Record = ({ item, field, label }) => {\n    return (\n        <div className=\"item-details__info-item list-group-item\">\n            {field}: {item[label]}\n        </div>\n    );\n};\nexport {\n    Record\n};\n\nexport default class ItemDetails extends Component {\n\n    state = {\n        item: null,\n        loading: false,\n        image: null\n    }\n\n    componentDidMount() {\n        this.itemUpdate();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.itemId !== prevProps.itemId) {\n            this.setState({ loading: true });\n            this.itemUpdate();\n        }\n    }\n\n    itemUpdate = () => {\n        const { itemId, getData, getImageUrl } = this.props;\n\n        if (!itemId) return;\n\n        getData(itemId)\n            .then((item) => {\n                this.setState({\n                    item,\n                    loading: false,\n                    image: getImageUrl(item)\n                });\n            });\n    }\n\n    render() {\n        const { item, loading } = this.state;\n\n        if (!item) {\n            return (\n                <div>Item not selected</div>\n            );\n        }\n\n        const itemView = !loading ? <ItemView item={item} image={this.state.image} children={this.props.children} /> : null;\n        const spinner = loading ? <Spinner /> : null;\n\n        return (\n            <div className=\"item-details\">\n                {spinner}\n                {itemView}\n            </div>\n        );\n    }\n}\n\nconst ItemView = ({ item, image, children }) => {\n    return (\n        <React.Fragment>\n            <img className=\"item-details__image\" src={image} alt=\"\" />\n            <div className=\"item-details__info\">\n                <div className=\"item-details__info-title\">\n                    {item.name}\n                </div>\n                <div className=\"item-details__info-list list-group list-group-flush\">\n                    {\n                        React.Children.map(children, (child) => {\n                            return React.cloneElement(child, { item });\n                        })\n                    }\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n","import ItemDetails, { Record } from './item-details';\n\nexport {\n    Record\n};\nexport default ItemDetails;\n","import React, { Component } from 'react';\nimport Spinner from '../spinner';\nimport ErrorIndicator from '../error-indicator';\n\nconst withData = (View) => {\n    return class extends Component {\n        state = {\n            data: null,\n            error: false\n        }\n\n        componentDidMount() {\n            this.props.getData()\n                .then(this.onDataLoaded)\n                .catch(this.onError);\n        }\n\n        onError = (err) => {\n            console.error(err);\n            this.setState({\n                error: true,\n            });\n        }\n\n        onDataLoaded = (data) => {\n            this.setState({ data });\n        }\n\n        render() {\n            const { data, error } = this.state;\n\n            if (!data && !error) return <Spinner />;\n            if (error) return <ErrorIndicator />;\n\n            return (\n                <View {...this.props} data={data} />\n            );\n        }\n    };\n};\n\nexport default withData;\n","import React from 'react';\nimport { SwapiServiceConsumer } from '../swapi-service-context';\n\nconst withSwapiService = (mapMethodsToProps) => (Wrapper) => {\n    return (props) => {\n        return (\n            <SwapiServiceConsumer>\n                {\n                    (swapiService) => {\n                        const propsService = mapMethodsToProps(swapiService);\n                        return (\n                            <Wrapper {...props} {...propsService} />\n                        )\n                    }\n                }\n            </SwapiServiceConsumer>\n        )\n    }\n}\n\nexport default withSwapiService;\n","import React from 'react';\n\nconst withChildFunction = (fn) => (Wrapped) => {\n    return (props) => {\n        return (\n            <Wrapped {...props}>\n                {fn}\n            </Wrapped>\n        );\n    };\n}\n\nexport default withChildFunction;\n","const compose = (...functions) => (component) => {\n    return functions.reduceRight((prevResult, f) => {\n        return f(prevResult);\n    }, component);\n}\n\nexport default compose;\n","import ItemDetails, { Record } from '../item-details';\nimport React from 'react';\nimport { withSwapiService } from '../hoc-helpers';\n\nconst PersonDetails = (props) => {\n    return (\n        <ItemDetails {...props}>\n            <Record field=\"Gender\" label=\"gender\" />\n            <Record field=\"Birth year\" label=\"birthYear\" />\n            <Record field=\"Eye color\" label=\"eyeColor\" />\n        </ItemDetails>\n    )\n};\n\nconst mapMethodsToProps = (swapiService) => {\n    return {\n        getData: swapiService.getPerson,\n        getImageUrl: swapiService.getPersonImage\n    }\n};\n\nexport default withSwapiService(mapMethodsToProps)(PersonDetails);\n","import ItemDetails, { Record } from '../item-details';\nimport React from 'react';\nimport { withSwapiService } from '../hoc-helpers';\n\nconst PlanetDetails = (props) => {\n    return (\n        <ItemDetails {...props}>\n            <Record field=\"Population\" label=\"population\" />\n            <Record field=\"Rotation period\" label=\"rotationPeriod\" />\n            <Record field=\"Diameter\" label=\"diameter\" />\n        </ItemDetails>\n    )\n};\n\nconst mapMethodsToProps = (swapiService) => {\n    return {\n        getData: swapiService.getPlanet,\n        getImageUrl: swapiService.getPlanetImage\n    }\n};\n\nexport default withSwapiService(mapMethodsToProps)(PlanetDetails);\n","import ItemDetails, { Record } from '../item-details';\nimport React from 'react';\nimport { withSwapiService } from '../hoc-helpers';\n\nconst StarshipDetails = (props) => {\n    return (\n        <ItemDetails {...props}>\n            <Record field=\"Model\" label=\"model\" />\n            <Record field=\"Length\" label=\"length\" />\n            <Record field=\"Cost\" label=\"costInCredits\" />\n        </ItemDetails>\n    )\n};\n\nconst mapMethodsToProps = (swapiService) => {\n    return {\n        getData: swapiService.getStarship,\n        getImageUrl: swapiService.getStarshipImage\n    }\n};\n\nexport default withSwapiService(mapMethodsToProps)(StarshipDetails);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './item-list.scss';\n\nconst ItemList = (props) => {\n\n    const { data, itemSelection, children: renderItem } = props;\n\n    const items = data.map((item) => {\n        const label = renderItem(item);\n\n        return (\n            <div className=\"item-list__item list-group-item list-group-item-action\"\n                key={item.id}\n                onClick={() => itemSelection(item.id)}>\n                {label}\n            </div>\n        );\n    });\n\n    return (\n        <div className=\"item-list list-group\">\n            {items}\n        </div>\n    );\n};\n\nItemList.defaultProps = {\n    itemSelection: () => {}\n};\n\nItemList.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\n    itemSelection: PropTypes.func,\n    children: PropTypes.func.isRequired\n};\n\nexport default ItemList;\n","import ItemList from './item-list';\n\nexport default ItemList;","import ItemList from '../item-list';\nimport { withData, withSwapiService, withChildFunction, compose } from '../hoc-helpers';\n\nconst renderName = ({ name }) => name;\nconst renderNameAndBirthYear = ({ name, birthYear }) => `${name} (${birthYear})`;\n\nconst mapPersonMethodToProps = (swapiService) => {\n    return {\n        getData: swapiService.getAllPeople\n    }\n}\n\nconst mapPlanetMethodToProps = (swapiService) => {\n    return {\n        getData: swapiService.getAllPlanets\n    }\n}\n\nconst mapStarshipMethodToProps = (swapiService) => {\n    return {\n        getData: swapiService.getAllStarships\n    }\n}\n\nconst PersonList = compose(\n    withSwapiService(mapPersonMethodToProps),\n    withData,\n    withChildFunction(renderNameAndBirthYear)\n)(ItemList);\n\nconst PlanetList = compose(\n    withSwapiService(mapPlanetMethodToProps),\n    withData,\n    withChildFunction(renderName)\n)(ItemList);\n\nconst StarshipList = compose(\n    withSwapiService(mapStarshipMethodToProps),\n    withData,\n    withChildFunction(renderName)\n)(ItemList);\n\nexport {\n    PersonList,\n    PlanetList,\n    StarshipList\n};\n","import Row from './row';\n\nexport default Row;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Row = ({ left, right }) => {\n    return (\n        <div className=\"row\">\n            <div className=\"col-md-6\">\n                {left}\n            </div>\n            <div className=\"col-md-6\">\n                {right}\n            </div>\n        </div>\n    );\n}\n\nRow.propTypes = {\n    left: PropTypes.node,\n    right: PropTypes.node\n}\n\nexport default Row;\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { PersonList, PersonDetails } from '../sw-components';\nimport Row from '../row';\n\nconst PeoplePage = ({ history, match }) => {\n\n    const { id } = match.params;\n\n    return (\n        <Row\n            left={<PersonList itemSelection={(id) => history.push(id)} />}\n            right={<PersonDetails itemId={id} />} />\n    );\n};\n\nexport default withRouter(PeoplePage);\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { PlanetList, PlanetDetails } from '../sw-components';\nimport Row from '../row';\n\nconst PlanetsPage = ({ history, match }) => {\n\n    const { id } = match.params;\n\n    return (\n        <Row\n            left={<PlanetList itemSelection={(id) => history.push(id)} />}\n            right={<PlanetDetails itemId={id} />} />\n    );\n}\n\nexport default withRouter(PlanetsPage);\n","import React from 'react';\nimport { StarshipList } from '../sw-components';\nimport { withRouter } from 'react-router-dom';\n\nconst StarshipsPage = ({ history }) => {\n    return (\n        <StarshipList itemSelection={(id) => history.push(id)} />\n    )\n}\n\nexport default withRouter(StarshipsPage);\n","import App from './app';\n\nexport default App;","import React, { Component } from 'react';\n\nimport './app.scss';\nimport Header from '../header';\nimport RandomPlanet from '../random-planet';\nimport { SwapiServiceProvider } from '../swapi-service-context';\nimport SwapiService from '../../services/swapi-service';\nimport { PeoplePage, PlanetsPage, StarshipsPage } from '../pages';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { StarshipDetails } from '../sw-components';\n\n\nexport default class App extends Component {\n  swapiService = new SwapiService();\n\n  render() {\n    return (\n      <div className=\"app\">\n        <SwapiServiceProvider value={this.swapiService}>\n          <Router>\n\n            <Header />\n            <RandomPlanet />\n\n            <Switch>\n              <Route path=\"/2-react-starDB/\"\n                render={() => <h2>Welcome to StarDB</h2>}\n                exact />\n              <Route path=\"/2-react-starDB/people/:id?\" component={PeoplePage} />\n              <Route path=\"/2-react-starDB/planets/:id?\" component={PlanetsPage} />\n              <Route path=\"/2-react-starDB/starships/\" exact component={StarshipsPage} />\n              <Route path=\"/2-react-starDB/starships/:id\"\n                render={({ match }) => {\n                  const { id } = match.params;\n                  return <StarshipDetails itemId={id} />\n                }} />\n              <Route render={() => <h2>Page not found!</h2>} />\n            </Switch>\n\n          </Router>\n        </SwapiServiceProvider>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}